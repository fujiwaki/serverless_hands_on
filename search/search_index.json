{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Chat service API","text":""},{"location":"reference/","title":"index","text":"<p>Lambda function entrypoint.</p>"},{"location":"reference/#index.handler","title":"<code>handler(event: dict[str, Any], context: LambdaContext) -&gt; dict[str, Any]</code>","text":"<p>Lambda function handler.</p> Source code in <code>src/index.py</code> <pre><code>@logger.inject_lambda_context(correlation_id_path=correlation_paths.API_GATEWAY_REST, log_event=True)\ndef handler(event: dict[str, Any], context: LambdaContext) -&gt; dict[str, Any]:\n    \"\"\"Lambda function handler.\"\"\"\n    app.append_context(container=container)\n    return app.resolve(event, context)\n</code></pre>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>chat<ul> <li>config<ul> <li>container</li> </ul> </li> <li>domain<ul> <li>builders</li> <li>post</li> <li>thread</li> </ul> </li> <li>infrastructure<ul> <li>post</li> <li>thread</li> </ul> </li> <li>shared<ul> <li>exceptions</li> </ul> </li> <li>use_case<ul> <li>create_post</li> <li>create_thread</li> <li>delete_post</li> <li>delete_thread</li> <li>dto</li> <li>get_thread</li> <li>list_posts</li> <li>list_threads</li> </ul> </li> </ul> </li> <li>index</li> <li>models<ul> <li>thread</li> </ul> </li> <li>routers<ul> <li>thread</li> </ul> </li> </ul>"},{"location":"reference/chat/","title":"chat","text":"<p>Chat.</p>"},{"location":"reference/chat/config/","title":"config","text":"<p>Configurations.</p>"},{"location":"reference/chat/config/container/","title":"container","text":"<p>DI container for the chat application.</p>"},{"location":"reference/chat/config/container/#chat.config.container.Container","title":"<code>Container(table_name: str)</code>","text":"<p>Dependency container for the chat application.</p> <p>Initialize the container.</p> <p>Parameters:</p> Name Type Description Default <code>table_name</code> <code>str</code> <p>The name of the DynamoDB table.</p> required Source code in <code>src/chat/config/container.py</code> <pre><code>def __init__(self, table_name: str) -&gt; None:\n    \"\"\"Initialize the container.\n\n    Args:\n        table_name: The name of the DynamoDB table.\n    \"\"\"\n    self._table_name = table_name\n</code></pre>"},{"location":"reference/chat/config/container/#chat.config.container.Container.create_post","title":"<code>create_post: CreatePost</code>  <code>property</code>","text":"<p>The create post use case instance.</p>"},{"location":"reference/chat/config/container/#chat.config.container.Container.create_thread","title":"<code>create_thread: CreateThread</code>  <code>property</code>","text":"<p>The create thread use case instance.</p>"},{"location":"reference/chat/config/container/#chat.config.container.Container.delete_post","title":"<code>delete_post: DeletePost</code>  <code>property</code>","text":"<p>The delete post use case instance.</p>"},{"location":"reference/chat/config/container/#chat.config.container.Container.delete_thread","title":"<code>delete_thread: DeleteThread</code>  <code>property</code>","text":"<p>The delete thread use case instance.</p>"},{"location":"reference/chat/config/container/#chat.config.container.Container.get_thread","title":"<code>get_thread: GetThread</code>  <code>property</code>","text":"<p>The get thread use case instance.</p>"},{"location":"reference/chat/config/container/#chat.config.container.Container.list_posts","title":"<code>list_posts: ListPosts</code>  <code>property</code>","text":"<p>The list posts use case instance.</p>"},{"location":"reference/chat/config/container/#chat.config.container.Container.list_threads","title":"<code>list_threads: ListThreads</code>  <code>property</code>","text":"<p>The list threads use case instance.</p>"},{"location":"reference/chat/config/container/#chat.config.container.Container.post_repository","title":"<code>post_repository: DynamoDBPostRepository</code>  <code>property</code>","text":"<p>The post repository instance.</p>"},{"location":"reference/chat/config/container/#chat.config.container.Container.table","title":"<code>table: Table</code>  <code>property</code>","text":"<p>The DynamoDB table instance.</p>"},{"location":"reference/chat/config/container/#chat.config.container.Container.thread_repository","title":"<code>thread_repository: DynamoDBThreadRepository</code>  <code>property</code>","text":"<p>The thread repository instance.</p>"},{"location":"reference/chat/domain/","title":"domain","text":"<p>Domain Layer.</p>"},{"location":"reference/chat/domain/builders/","title":"builders","text":"<p>Domain builders for the chat module.</p>"},{"location":"reference/chat/domain/builders/#chat.domain.builders.PostBuilder","title":"<code>PostBuilder(repository: AbstractThreadRepository)</code>","text":"<p>Builder for the Post model.</p> <p>Initialize the PostBuilder instance.</p> Source code in <code>src/chat/domain/builders.py</code> <pre><code>def __init__(self, repository: AbstractThreadRepository) -&gt; None:\n    \"\"\"Initialize the PostBuilder instance.\"\"\"\n    self._repository = repository\n</code></pre>"},{"location":"reference/chat/domain/builders/#chat.domain.builders.PostBuilder.build","title":"<code>build(thread_id: ULID, message: str) -&gt; Post</code>","text":"<p>Build the Post instance.</p> <p>Parameters:</p> Name Type Description Default <code>thread_id</code> <code>ULID</code> <p>The ID of the thread that the post belongs to.</p> required <code>message</code> <code>str</code> <p>The message of the post.</p> required Source code in <code>src/chat/domain/builders.py</code> <pre><code>def build(self, thread_id: ULID, message: str) -&gt; Post:\n    \"\"\"Build the Post instance.\n\n    Args:\n        thread_id: The ID of the thread that the post belongs to.\n        message: The message of the post.\n    \"\"\"\n    if not self._repository.find_by_id(thread_id):\n        raise ThreadNotFoundError(thread_id)\n\n    return Post(id_=ULID(), thread_id=thread_id, message=message, created_at=datetime.now(tz=UTC))\n</code></pre>"},{"location":"reference/chat/domain/builders/#chat.domain.builders.ThreadBuilder","title":"<code>ThreadBuilder(repository: AbstractThreadRepository)</code>","text":"<p>Builder for the Thread model.</p> <p>Initialize the ThreadBuilder instance.</p> <p>Parameters:</p> Name Type Description Default <code>repository</code> <code>AbstractThreadRepository</code> <p>The repository to use for thread operations.</p> required Source code in <code>src/chat/domain/builders.py</code> <pre><code>def __init__(self, repository: AbstractThreadRepository) -&gt; None:\n    \"\"\"Initialize the ThreadBuilder instance.\n\n    Args:\n        repository: The repository to use for thread operations.\n    \"\"\"\n    self._repository = repository\n</code></pre>"},{"location":"reference/chat/domain/builders/#chat.domain.builders.ThreadBuilder.build","title":"<code>build(name: str) -&gt; Thread</code>","text":"<p>Build the Thread instance.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name of the thread.</p> required <p>Returns:</p> Type Description <code>Thread</code> <p>The built Thread instance.</p> <p>Raises:</p> Type Description <code>ThreadExistsError</code> <p>If a thread with the given name already exists.</p> Source code in <code>src/chat/domain/builders.py</code> <pre><code>def build(self, name: str) -&gt; Thread:\n    \"\"\"Build the Thread instance.\n\n    Args:\n        name: The name of the thread.\n\n    Returns:\n        The built Thread instance.\n\n    Raises:\n        ThreadExistsError: If a thread with the given name already exists.\n    \"\"\"\n    threads = self._repository.list_all()\n    if any(thread.name == name for thread in threads):\n        raise ThreadExistsError(name)\n\n    return Thread(id_=ULID(), name=name, created_at=datetime.now(tz=UTC))\n</code></pre>"},{"location":"reference/chat/domain/post/","title":"post","text":"<p>This module defines the Post model and related classes.</p>"},{"location":"reference/chat/domain/post/#chat.domain.post.AbstractPostRepository","title":"<code>AbstractPostRepository</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Defines the interface for a post repository.</p>"},{"location":"reference/chat/domain/post/#chat.domain.post.AbstractPostRepository.delete","title":"<code>delete(thread_id: ULID, post_id: ULID) -&gt; None</code>  <code>abstractmethod</code>","text":"<p>Delete the Post with the given ID.</p> <p>Parameters:</p> Name Type Description Default <code>thread_id</code> <code>ULID</code> <p>The ID of the thread that the post belongs to.</p> required <code>post_id</code> <code>ULID</code> <p>The ID of the post to delete.</p> required <p>Raises:</p> Type Description <code>PostNotFoundError</code> <p>If the post with the given ID does not exist.</p> Source code in <code>src/chat/domain/post.py</code> <pre><code>@abstractmethod\ndef delete(self, thread_id: ULID, post_id: ULID) -&gt; None:\n    \"\"\"Delete the Post with the given ID.\n\n    Args:\n        thread_id: The ID of the thread that the post belongs to.\n        post_id: The ID of the post to delete.\n\n    Raises:\n        PostNotFoundError: If the post with the given ID does not exist.\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/chat/domain/post/#chat.domain.post.AbstractPostRepository.list_by_thread_id","title":"<code>list_by_thread_id(thread_id: ULID, *, start: datetime | None = None) -&gt; list[Post]</code>  <code>abstractmethod</code>","text":"<p>List all posts with the specified thread ID.</p> <p>This method retrieves a list of Post instances that belong to the specified thread ID. The posts are listed starting from the specified timestamp.</p> <p>Parameters:</p> Name Type Description Default <code>thread_id</code> <code>ULID</code> <p>The ULID of the thread to find.</p> required <code>start</code> <code>datetime | None</code> <p>The timestamp to start listing posts from.</p> <code>None</code> <p>Returns:</p> Type Description <code>list[Post]</code> <p>A list of Post instances with the specified thread ID.</p> Source code in <code>src/chat/domain/post.py</code> <pre><code>@abstractmethod\ndef list_by_thread_id(self, thread_id: ULID, *, start: datetime | None = None) -&gt; list[Post]:\n    \"\"\"List all posts with the specified thread ID.\n\n    This method retrieves a list of Post instances that belong to the specified thread ID.\n    The posts are listed starting from the specified timestamp.\n\n    Args:\n        thread_id: The ULID of the thread to find.\n        start: The timestamp to start listing posts from.\n\n    Returns:\n        A list of Post instances with the specified thread ID.\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/chat/domain/post/#chat.domain.post.AbstractPostRepository.save","title":"<code>save(post: Post) -&gt; None</code>  <code>abstractmethod</code>","text":"<p>Save the given Post instance to the repository.</p> <p>Parameters:</p> Name Type Description Default <code>post</code> <code>Post</code> <p>The Post instance to be saved.</p> required Source code in <code>src/chat/domain/post.py</code> <pre><code>@abstractmethod\ndef save(self, post: Post) -&gt; None:\n    \"\"\"Save the given Post instance to the repository.\n\n    Args:\n        post: The Post instance to be saved.\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/chat/domain/post/#chat.domain.post.Post","title":"<code>Post</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Post model.</p> <p>Attributes:</p> Name Type Description <code>id_</code> <code>ULID</code> <p>The ID of the post.</p> <code>thread_id</code> <code>ULID</code> <p>The ID of the thread that the post belongs to.</p> <code>message</code> <code>str</code> <p>The message of the post.</p> <code>created_at</code> <code>datetime</code> <p>The timestamp when the post was created, in UTC.</p>"},{"location":"reference/chat/domain/post/#chat.domain.post.Post.message_must_not_be_empty","title":"<code>message_must_not_be_empty(message: str) -&gt; str</code>  <code>classmethod</code>","text":"<p>Validate that the message is not empty.</p> Source code in <code>src/chat/domain/post.py</code> <pre><code>@field_validator(\"message\")\n@classmethod\ndef message_must_not_be_empty(cls, message: str) -&gt; str:\n    \"\"\"Validate that the message is not empty.\"\"\"\n    if not message:\n        error_message = \"The message must not be empty.\"\n        raise ValueError(error_message)\n    return message\n</code></pre>"},{"location":"reference/chat/domain/thread/","title":"thread","text":"<p>This module defines the Thread models.</p>"},{"location":"reference/chat/domain/thread/#chat.domain.thread.AbstractThreadRepository","title":"<code>AbstractThreadRepository</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Defines the interface for a thread repository.</p>"},{"location":"reference/chat/domain/thread/#chat.domain.thread.AbstractThreadRepository.delete","title":"<code>delete(id_: ULID) -&gt; None</code>  <code>abstractmethod</code>","text":"<p>Delete the thread with the given ID.</p> <p>Parameters:</p> Name Type Description Default <code>id_</code> <code>ULID</code> <p>The ID of the thread to delete.</p> required <p>Raises:</p> Type Description <code>ThreadNotFoundError</code> <p>If the thread with the given ID does not exist.</p> Source code in <code>src/chat/domain/thread.py</code> <pre><code>@abstractmethod\ndef delete(self, id_: ULID) -&gt; None:\n    \"\"\"Delete the thread with the given ID.\n\n    Args:\n        id_: The ID of the thread to delete.\n\n    Raises:\n        ThreadNotFoundError: If the thread with the given ID does not exist.\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/chat/domain/thread/#chat.domain.thread.AbstractThreadRepository.find_by_id","title":"<code>find_by_id(thread_id: ULID) -&gt; Thread | None</code>  <code>abstractmethod</code>","text":"<p>Find a Thread instance by its ID.</p> <p>Parameters:</p> Name Type Description Default <code>thread_id</code> <code>ULID</code> <p>The ULID of the thread to find.</p> required <p>Returns:</p> Type Description <code>Thread | None</code> <p>The Thread instance corresponding to the given ULID.</p> Source code in <code>src/chat/domain/thread.py</code> <pre><code>@abstractmethod\ndef find_by_id(self, thread_id: ULID) -&gt; Thread | None:\n    \"\"\"Find a Thread instance by its ID.\n\n    Args:\n        thread_id: The ULID of the thread to find.\n\n    Returns:\n        The Thread instance corresponding to the given ULID.\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/chat/domain/thread/#chat.domain.thread.AbstractThreadRepository.list_all","title":"<code>list_all() -&gt; list[Thread]</code>  <code>abstractmethod</code>","text":"<p>Retrieves a list of all threads.</p> <p>Returns:</p> Type Description <code>list[Thread]</code> <p>A list of Thread objects representing all threads.</p> Source code in <code>src/chat/domain/thread.py</code> <pre><code>@abstractmethod\ndef list_all(self) -&gt; list[Thread]:\n    \"\"\"Retrieves a list of all threads.\n\n    Returns:\n        A list of Thread objects representing all threads.\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/chat/domain/thread/#chat.domain.thread.AbstractThreadRepository.save","title":"<code>save(thread: Thread) -&gt; None</code>  <code>abstractmethod</code>","text":"<p>Save the given Thread instance to the repository.</p> <p>Parameters:</p> Name Type Description Default <code>thread</code> <code>Thread</code> <p>The Thread instance to be saved.</p> required Source code in <code>src/chat/domain/thread.py</code> <pre><code>@abstractmethod\ndef save(self, thread: Thread) -&gt; None:\n    \"\"\"Save the given Thread instance to the repository.\n\n    Args:\n        thread: The Thread instance to be saved.\n    \"\"\"\n    raise NotImplementedError\n</code></pre>"},{"location":"reference/chat/domain/thread/#chat.domain.thread.Thread","title":"<code>Thread</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Thread model.</p> <p>Attributes:</p> Name Type Description <code>id_</code> <code>ULID</code> <p>The ID of the thread.</p> <code>name</code> <code>str</code> <p>The name of the thread.</p> <code>created_at</code> <code>datetime</code> <p>The timestamp when the thread was created, in UTC.</p>"},{"location":"reference/chat/domain/thread/#chat.domain.thread.Thread.name_must_not_be_empty","title":"<code>name_must_not_be_empty(name: str) -&gt; str</code>  <code>classmethod</code>","text":"<p>Validate that the name is not empty.</p> <p>Parameters:</p> Name Type Description Default <code>name</code> <code>str</code> <p>The name to validate.</p> required <p>Returns:</p> Type Description <code>str</code> <p>The name if it is not empty.</p> <p>Raises:</p> Type Description <code>ValueError</code> <p>If the name is empty.</p> Source code in <code>src/chat/domain/thread.py</code> <pre><code>@field_validator(\"name\")\n@classmethod\ndef name_must_not_be_empty(cls, name: str) -&gt; str:\n    \"\"\"Validate that the name is not empty.\n\n    Args:\n        name: The name to validate.\n\n    Returns:\n        The name if it is not empty.\n\n    Raises:\n        ValueError: If the name is empty.\n    \"\"\"\n    if not name:\n        error_message = \"The thread name must not be empty.\"\n        raise ValueError(error_message)\n    return name\n</code></pre>"},{"location":"reference/chat/infrastructure/","title":"infrastructure","text":"<p>Infrastructure layer.</p>"},{"location":"reference/chat/infrastructure/#chat.infrastructure.DynamoDBPostRepository","title":"<code>DynamoDBPostRepository(table: Table)</code>","text":"<p>               Bases: <code>AbstractPostRepository</code></p> <p>DynamoDB repository for Post entities.</p> <p>Initialize the repository.</p> <p>Parameters:</p> Name Type Description Default <code>table</code> <code>Table</code> <p>The DynamoDB table instance.</p> required Source code in <code>src/chat/infrastructure/post.py</code> <pre><code>def __init__(self, table: Table) -&gt; None:\n    \"\"\"Initialize the repository.\n\n    Args:\n        table: The DynamoDB table instance.\n    \"\"\"\n    self._table = table\n</code></pre>"},{"location":"reference/chat/infrastructure/#chat.infrastructure.DynamoDBPostRepository.delete","title":"<code>delete(thread_id: ULID, post_id: ULID) -&gt; None</code>","text":"<p>Delete the post with the specified ID.</p> <p>Parameters:</p> Name Type Description Default <code>thread_id</code> <code>ULID</code> <p>The ID of the thread that the post belongs to.</p> required <code>post_id</code> <code>ULID</code> <p>The ID of the post to delete.</p> required Source code in <code>src/chat/infrastructure/post.py</code> <pre><code>def delete(self, thread_id: ULID, post_id: ULID) -&gt; None:\n    \"\"\"Delete the post with the specified ID.\n\n    Args:\n        thread_id: The ID of the thread that the post belongs to.\n        post_id: The ID of the post to delete.\n    \"\"\"\n    response = self._table.delete_item(\n        Key={\"thread_id\": str(thread_id), \"post_id\": str(post_id)}, ReturnValues=\"ALL_OLD\"\n    )\n\n    if not response.get(\"Attributes\"):\n        raise PostNotFoundError(post_id)\n</code></pre>"},{"location":"reference/chat/infrastructure/#chat.infrastructure.DynamoDBPostRepository.list_by_thread_id","title":"<code>list_by_thread_id(thread_id: ULID, *, start: datetime | None = None) -&gt; list[Post]</code>","text":"<p>List all posts with the specified thread ID.</p> <p>Parameters:</p> Name Type Description Default <code>thread_id</code> <code>ULID</code> <p>The ID of the thread to find.</p> required <code>start</code> <code>datetime | None</code> <p>The timestamp to start listing posts from.</p> <code>None</code> <p>Returns:</p> Type Description <code>list[Post]</code> <p>A list of Post instances with the specified thread ID.</p> Source code in <code>src/chat/infrastructure/post.py</code> <pre><code>def list_by_thread_id(self, thread_id: ULID, *, start: datetime | None = None) -&gt; list[Post]:\n    \"\"\"List all posts with the specified thread ID.\n\n    Args:\n        thread_id: The ID of the thread to find.\n        start: The timestamp to start listing posts from.\n\n    Returns:\n        A list of Post instances with the specified thread ID.\n    \"\"\"\n    key_condition = Key(\"thread_id\").eq(str(thread_id))\n    if start:\n        key_condition = key_condition &amp; Key(\"post_id\").gt(str(ULID.from_datetime(start))[:10])  # type: ignore[assignment]\n\n    response = self._table.query(KeyConditionExpression=key_condition)\n    items = response.get(\"Items\", [])\n    return [PostData.model_validate(item).to_model() for item in items]\n</code></pre>"},{"location":"reference/chat/infrastructure/#chat.infrastructure.DynamoDBPostRepository.save","title":"<code>save(post: Post) -&gt; None</code>","text":"<p>Save the given Post instance to the repository.</p> <p>Parameters:</p> Name Type Description Default <code>post</code> <code>Post</code> <p>The Post instance to be saved.</p> required Source code in <code>src/chat/infrastructure/post.py</code> <pre><code>def save(self, post: Post) -&gt; None:\n    \"\"\"Save the given Post instance to the repository.\n\n    Args:\n        post: The Post instance to be saved.\n    \"\"\"\n    self._table.put_item(Item=PostData.from_model(post).model_dump(exclude_none=True))\n</code></pre>"},{"location":"reference/chat/infrastructure/#chat.infrastructure.DynamoDBThreadRepository","title":"<code>DynamoDBThreadRepository(table: Table)</code>","text":"<p>               Bases: <code>AbstractThreadRepository</code></p> <p>DynamoDB repository for Thread entities.</p> <p>Initialize the repository.</p> <p>Parameters:</p> Name Type Description Default <code>table</code> <code>Table</code> <p>The DynamoDB table to use.</p> required Source code in <code>src/chat/infrastructure/thread.py</code> <pre><code>def __init__(self, table: Table) -&gt; None:\n    \"\"\"Initialize the repository.\n\n    Args:\n        table: The DynamoDB table to use.\n    \"\"\"\n    self._table = table\n</code></pre>"},{"location":"reference/chat/infrastructure/#chat.infrastructure.DynamoDBThreadRepository.delete","title":"<code>delete(id_: ULID) -&gt; None</code>","text":"<p>Delete the thread with the given ID.</p> <p>Parameters:</p> Name Type Description Default <code>id_</code> <code>ULID</code> <p>The ID of the thread to delete.</p> required Source code in <code>src/chat/infrastructure/thread.py</code> <pre><code>def delete(self, id_: ULID) -&gt; None:\n    \"\"\"Delete the thread with the given ID.\n\n    Args:\n        id_: The ID of the thread to delete.\n    \"\"\"\n    response = self._table.delete_item(Key={\"thread_id\": str(id_), \"post_id\": \"-\"}, ReturnValues=\"ALL_OLD\")\n\n    if not response.get(\"Attributes\"):\n        raise ThreadNotFoundError(id_)\n</code></pre>"},{"location":"reference/chat/infrastructure/#chat.infrastructure.DynamoDBThreadRepository.find_by_id","title":"<code>find_by_id(thread_id: ULID) -&gt; Thread | None</code>","text":"<p>Find a thread by its ID.</p> <p>Parameters:</p> Name Type Description Default <code>thread_id</code> <code>ULID</code> <p>The ID of the thread to find.</p> required <p>Returns:</p> Type Description <code>Thread | None</code> <p>The Thread instance corresponding to the given ID, or None if not found.</p> Source code in <code>src/chat/infrastructure/thread.py</code> <pre><code>def find_by_id(self, thread_id: ULID) -&gt; Thread | None:\n    \"\"\"Find a thread by its ID.\n\n    Args:\n        thread_id: The ID of the thread to find.\n\n    Returns:\n        The Thread instance corresponding to the given ID, or None if not found.\n    \"\"\"\n    response = self._table.get_item(Key={\"thread_id\": str(thread_id), \"post_id\": \"-\"})\n    item = response.get(\"Item\")\n    return ThreadData.model_validate(item).to_model() if item else None\n</code></pre>"},{"location":"reference/chat/infrastructure/#chat.infrastructure.DynamoDBThreadRepository.list_all","title":"<code>list_all() -&gt; list[Thread]</code>","text":"<p>List all threads.</p> <p>Returns:</p> Type Description <code>list[Thread]</code> <p>The list of all threads.</p> Source code in <code>src/chat/infrastructure/thread.py</code> <pre><code>def list_all(self) -&gt; list[Thread]:\n    \"\"\"List all threads.\n\n    Returns:\n        The list of all threads.\n    \"\"\"\n    response = self._table.query(IndexName=\"by_category\", KeyConditionExpression=Key(\"category\").eq(\"Thread\"))\n    items = response.get(\"Items\", [])\n    return [ThreadData.model_validate(item).to_model() for item in items]\n</code></pre>"},{"location":"reference/chat/infrastructure/#chat.infrastructure.DynamoDBThreadRepository.save","title":"<code>save(thread: Thread) -&gt; None</code>","text":"<p>Save the given Thread instance to the repository.</p> <p>Parameters:</p> Name Type Description Default <code>thread</code> <code>Thread</code> <p>The Thread instance to be saved.</p> required Source code in <code>src/chat/infrastructure/thread.py</code> <pre><code>def save(self, thread: Thread) -&gt; None:\n    \"\"\"Save the given Thread instance to the repository.\n\n    Args:\n        thread: The Thread instance to be saved.\n    \"\"\"\n    self._table.put_item(Item=ThreadData.from_model(thread).model_dump(exclude_none=True))\n</code></pre>"},{"location":"reference/chat/infrastructure/post/","title":"post","text":"<p>Post repository implementation.</p>"},{"location":"reference/chat/infrastructure/post/#chat.infrastructure.post.DynamoDBPostRepository","title":"<code>DynamoDBPostRepository(table: Table)</code>","text":"<p>               Bases: <code>AbstractPostRepository</code></p> <p>DynamoDB repository for Post entities.</p> <p>Initialize the repository.</p> <p>Parameters:</p> Name Type Description Default <code>table</code> <code>Table</code> <p>The DynamoDB table instance.</p> required Source code in <code>src/chat/infrastructure/post.py</code> <pre><code>def __init__(self, table: Table) -&gt; None:\n    \"\"\"Initialize the repository.\n\n    Args:\n        table: The DynamoDB table instance.\n    \"\"\"\n    self._table = table\n</code></pre>"},{"location":"reference/chat/infrastructure/post/#chat.infrastructure.post.DynamoDBPostRepository.delete","title":"<code>delete(thread_id: ULID, post_id: ULID) -&gt; None</code>","text":"<p>Delete the post with the specified ID.</p> <p>Parameters:</p> Name Type Description Default <code>thread_id</code> <code>ULID</code> <p>The ID of the thread that the post belongs to.</p> required <code>post_id</code> <code>ULID</code> <p>The ID of the post to delete.</p> required Source code in <code>src/chat/infrastructure/post.py</code> <pre><code>def delete(self, thread_id: ULID, post_id: ULID) -&gt; None:\n    \"\"\"Delete the post with the specified ID.\n\n    Args:\n        thread_id: The ID of the thread that the post belongs to.\n        post_id: The ID of the post to delete.\n    \"\"\"\n    response = self._table.delete_item(\n        Key={\"thread_id\": str(thread_id), \"post_id\": str(post_id)}, ReturnValues=\"ALL_OLD\"\n    )\n\n    if not response.get(\"Attributes\"):\n        raise PostNotFoundError(post_id)\n</code></pre>"},{"location":"reference/chat/infrastructure/post/#chat.infrastructure.post.DynamoDBPostRepository.list_by_thread_id","title":"<code>list_by_thread_id(thread_id: ULID, *, start: datetime | None = None) -&gt; list[Post]</code>","text":"<p>List all posts with the specified thread ID.</p> <p>Parameters:</p> Name Type Description Default <code>thread_id</code> <code>ULID</code> <p>The ID of the thread to find.</p> required <code>start</code> <code>datetime | None</code> <p>The timestamp to start listing posts from.</p> <code>None</code> <p>Returns:</p> Type Description <code>list[Post]</code> <p>A list of Post instances with the specified thread ID.</p> Source code in <code>src/chat/infrastructure/post.py</code> <pre><code>def list_by_thread_id(self, thread_id: ULID, *, start: datetime | None = None) -&gt; list[Post]:\n    \"\"\"List all posts with the specified thread ID.\n\n    Args:\n        thread_id: The ID of the thread to find.\n        start: The timestamp to start listing posts from.\n\n    Returns:\n        A list of Post instances with the specified thread ID.\n    \"\"\"\n    key_condition = Key(\"thread_id\").eq(str(thread_id))\n    if start:\n        key_condition = key_condition &amp; Key(\"post_id\").gt(str(ULID.from_datetime(start))[:10])  # type: ignore[assignment]\n\n    response = self._table.query(KeyConditionExpression=key_condition)\n    items = response.get(\"Items\", [])\n    return [PostData.model_validate(item).to_model() for item in items]\n</code></pre>"},{"location":"reference/chat/infrastructure/post/#chat.infrastructure.post.DynamoDBPostRepository.save","title":"<code>save(post: Post) -&gt; None</code>","text":"<p>Save the given Post instance to the repository.</p> <p>Parameters:</p> Name Type Description Default <code>post</code> <code>Post</code> <p>The Post instance to be saved.</p> required Source code in <code>src/chat/infrastructure/post.py</code> <pre><code>def save(self, post: Post) -&gt; None:\n    \"\"\"Save the given Post instance to the repository.\n\n    Args:\n        post: The Post instance to be saved.\n    \"\"\"\n    self._table.put_item(Item=PostData.from_model(post).model_dump(exclude_none=True))\n</code></pre>"},{"location":"reference/chat/infrastructure/post/#chat.infrastructure.post.PostData","title":"<code>PostData</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Post data model for DynamoDB record.</p> <p>Attributes:</p> Name Type Description <code>thread_id</code> <code>str</code> <p>The ID of the thread.</p> <code>post_id</code> <code>str</code> <p>The ID of the post.</p> <code>category</code> <code>str</code> <p>The category of the record. Always \"Post\".</p> <code>message</code> <code>str</code> <p>The message of the post.</p> <code>created_at</code> <code>int</code> <p>The timestamp when the post was created.</p>"},{"location":"reference/chat/infrastructure/post/#chat.infrastructure.post.PostData.from_model","title":"<code>from_model(model: Post) -&gt; PostData</code>  <code>classmethod</code>","text":"<p>Create a PostData instance from a Post model.</p> <p>Parameters:</p> Name Type Description Default <code>model</code> <code>Post</code> <p>The Post model to convert.</p> required <p>Returns:</p> Type Description <code>PostData</code> <p>The converted PostData instance.</p> Source code in <code>src/chat/infrastructure/post.py</code> <pre><code>@classmethod\ndef from_model(cls, model: Post) -&gt; PostData:\n    \"\"\"Create a PostData instance from a Post model.\n\n    Args:\n        model: The Post model to convert.\n\n    Returns:\n        The converted PostData instance.\n    \"\"\"\n    return cls(\n        thread_id=str(model.thread_id),\n        post_id=str(model.id_),\n        category=\"Post\",\n        message=model.message,\n        created_at=int(model.created_at.timestamp() * 1000000),\n    )\n</code></pre>"},{"location":"reference/chat/infrastructure/post/#chat.infrastructure.post.PostData.to_model","title":"<code>to_model() -&gt; Post</code>","text":"<p>Convert the PostData instance to a Post model.</p> <p>Returns:</p> Type Description <code>Post</code> <p>The converted Post model.</p> Source code in <code>src/chat/infrastructure/post.py</code> <pre><code>def to_model(self) -&gt; Post:\n    \"\"\"Convert the PostData instance to a Post model.\n\n    Returns:\n        The converted Post model.\n    \"\"\"\n    return Post(\n        id_=ULID.from_str(self.post_id),\n        thread_id=ULID.from_str(self.thread_id),\n        message=self.message,\n        created_at=datetime.fromtimestamp(self.created_at / 1000000, tz=UTC),\n    )\n</code></pre>"},{"location":"reference/chat/infrastructure/thread/","title":"thread","text":"<p>Repository implementation for Thread entities.</p>"},{"location":"reference/chat/infrastructure/thread/#chat.infrastructure.thread.DynamoDBThreadRepository","title":"<code>DynamoDBThreadRepository(table: Table)</code>","text":"<p>               Bases: <code>AbstractThreadRepository</code></p> <p>DynamoDB repository for Thread entities.</p> <p>Initialize the repository.</p> <p>Parameters:</p> Name Type Description Default <code>table</code> <code>Table</code> <p>The DynamoDB table to use.</p> required Source code in <code>src/chat/infrastructure/thread.py</code> <pre><code>def __init__(self, table: Table) -&gt; None:\n    \"\"\"Initialize the repository.\n\n    Args:\n        table: The DynamoDB table to use.\n    \"\"\"\n    self._table = table\n</code></pre>"},{"location":"reference/chat/infrastructure/thread/#chat.infrastructure.thread.DynamoDBThreadRepository.delete","title":"<code>delete(id_: ULID) -&gt; None</code>","text":"<p>Delete the thread with the given ID.</p> <p>Parameters:</p> Name Type Description Default <code>id_</code> <code>ULID</code> <p>The ID of the thread to delete.</p> required Source code in <code>src/chat/infrastructure/thread.py</code> <pre><code>def delete(self, id_: ULID) -&gt; None:\n    \"\"\"Delete the thread with the given ID.\n\n    Args:\n        id_: The ID of the thread to delete.\n    \"\"\"\n    response = self._table.delete_item(Key={\"thread_id\": str(id_), \"post_id\": \"-\"}, ReturnValues=\"ALL_OLD\")\n\n    if not response.get(\"Attributes\"):\n        raise ThreadNotFoundError(id_)\n</code></pre>"},{"location":"reference/chat/infrastructure/thread/#chat.infrastructure.thread.DynamoDBThreadRepository.find_by_id","title":"<code>find_by_id(thread_id: ULID) -&gt; Thread | None</code>","text":"<p>Find a thread by its ID.</p> <p>Parameters:</p> Name Type Description Default <code>thread_id</code> <code>ULID</code> <p>The ID of the thread to find.</p> required <p>Returns:</p> Type Description <code>Thread | None</code> <p>The Thread instance corresponding to the given ID, or None if not found.</p> Source code in <code>src/chat/infrastructure/thread.py</code> <pre><code>def find_by_id(self, thread_id: ULID) -&gt; Thread | None:\n    \"\"\"Find a thread by its ID.\n\n    Args:\n        thread_id: The ID of the thread to find.\n\n    Returns:\n        The Thread instance corresponding to the given ID, or None if not found.\n    \"\"\"\n    response = self._table.get_item(Key={\"thread_id\": str(thread_id), \"post_id\": \"-\"})\n    item = response.get(\"Item\")\n    return ThreadData.model_validate(item).to_model() if item else None\n</code></pre>"},{"location":"reference/chat/infrastructure/thread/#chat.infrastructure.thread.DynamoDBThreadRepository.list_all","title":"<code>list_all() -&gt; list[Thread]</code>","text":"<p>List all threads.</p> <p>Returns:</p> Type Description <code>list[Thread]</code> <p>The list of all threads.</p> Source code in <code>src/chat/infrastructure/thread.py</code> <pre><code>def list_all(self) -&gt; list[Thread]:\n    \"\"\"List all threads.\n\n    Returns:\n        The list of all threads.\n    \"\"\"\n    response = self._table.query(IndexName=\"by_category\", KeyConditionExpression=Key(\"category\").eq(\"Thread\"))\n    items = response.get(\"Items\", [])\n    return [ThreadData.model_validate(item).to_model() for item in items]\n</code></pre>"},{"location":"reference/chat/infrastructure/thread/#chat.infrastructure.thread.DynamoDBThreadRepository.save","title":"<code>save(thread: Thread) -&gt; None</code>","text":"<p>Save the given Thread instance to the repository.</p> <p>Parameters:</p> Name Type Description Default <code>thread</code> <code>Thread</code> <p>The Thread instance to be saved.</p> required Source code in <code>src/chat/infrastructure/thread.py</code> <pre><code>def save(self, thread: Thread) -&gt; None:\n    \"\"\"Save the given Thread instance to the repository.\n\n    Args:\n        thread: The Thread instance to be saved.\n    \"\"\"\n    self._table.put_item(Item=ThreadData.from_model(thread).model_dump(exclude_none=True))\n</code></pre>"},{"location":"reference/chat/infrastructure/thread/#chat.infrastructure.thread.ThreadData","title":"<code>ThreadData</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Thread data model for DynamoDB record.</p> <p>Attributes:</p> Name Type Description <code>thread_id</code> <code>str</code> <p>The ID of the thread.</p> <code>post_id</code> <code>str</code> <p>The ID of the post.</p> <code>category</code> <code>str</code> <p>The category of the record. Always \"Thread\".</p> <code>name</code> <code>str</code> <p>The name of the thread.</p> <code>created_at</code> <code>int</code> <p>The timestamp when the thread was created.</p>"},{"location":"reference/chat/infrastructure/thread/#chat.infrastructure.thread.ThreadData.from_model","title":"<code>from_model(model: Thread) -&gt; Self</code>  <code>classmethod</code>","text":"<p>Create a ThreadData instance from a Thread model.</p> <p>Parameters:</p> Name Type Description Default <code>model</code> <code>Thread</code> <p>The Thread model to convert.</p> required <p>Returns:</p> Type Description <code>Self</code> <p>The converted ThreadData instance.</p> Source code in <code>src/chat/infrastructure/thread.py</code> <pre><code>@classmethod\ndef from_model(cls, model: Thread) -&gt; Self:\n    \"\"\"Create a ThreadData instance from a Thread model.\n\n    Args:\n        model: The Thread model to convert.\n\n    Returns:\n        The converted ThreadData instance.\n    \"\"\"\n    return cls(\n        thread_id=str(model.id_),\n        post_id=\"-\",\n        category=\"Thread\",\n        name=model.name,\n        created_at=int(model.created_at.timestamp() * 1000000),\n    )\n</code></pre>"},{"location":"reference/chat/infrastructure/thread/#chat.infrastructure.thread.ThreadData.to_model","title":"<code>to_model() -&gt; Thread</code>","text":"<p>Convert the ThreadData instance to a Thread model.</p> <p>Returns:</p> Type Description <code>Thread</code> <p>The converted Thread model.</p> Source code in <code>src/chat/infrastructure/thread.py</code> <pre><code>def to_model(self) -&gt; Thread:\n    \"\"\"Convert the ThreadData instance to a Thread model.\n\n    Returns:\n        The converted Thread model.\n    \"\"\"\n    return Thread(\n        id_=ULID.from_str(self.thread_id),\n        name=self.name,\n        created_at=datetime.fromtimestamp(self.created_at / 1000000, tz=UTC),\n    )\n</code></pre>"},{"location":"reference/chat/shared/","title":"shared","text":"<p>Shared functions for chat.</p>"},{"location":"reference/chat/shared/exceptions/","title":"exceptions","text":"<p>Custom exception classes for chat.</p>"},{"location":"reference/chat/shared/exceptions/#chat.shared.exceptions.PostNotFoundError","title":"<code>PostNotFoundError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Raised when a post is not found in the repository.</p>"},{"location":"reference/chat/shared/exceptions/#chat.shared.exceptions.ThreadExistsError","title":"<code>ThreadExistsError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Raised when a thread with the same name already exists.</p>"},{"location":"reference/chat/shared/exceptions/#chat.shared.exceptions.ThreadNotFoundError","title":"<code>ThreadNotFoundError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Raised when a thread is not found in the repository.</p>"},{"location":"reference/chat/use_case/","title":"use_case","text":"<p>Use case Layer.</p>"},{"location":"reference/chat/use_case/#chat.use_case.CreatePost","title":"<code>CreatePost(thread_repository: AbstractThreadRepository, post_repository: AbstractPostRepository)</code>","text":"<p>Use case for creating new posts.</p> <p>Initialize the use case.</p> <p>Parameters:</p> Name Type Description Default <code>thread_repository</code> <code>AbstractThreadRepository</code> <p>The repository to use for thread operations.</p> required <code>post_repository</code> <code>AbstractPostRepository</code> <p>The repository to use for post operations.</p> required Source code in <code>src/chat/use_case/create_post.py</code> <pre><code>def __init__(self, thread_repository: AbstractThreadRepository, post_repository: AbstractPostRepository) -&gt; None:\n    \"\"\"Initialize the use case.\n\n    Args:\n        thread_repository: The repository to use for thread operations.\n        post_repository: The repository to use for post operations.\n    \"\"\"\n    self._thread_repository = thread_repository\n    self._post_repository = post_repository\n</code></pre>"},{"location":"reference/chat/use_case/#chat.use_case.CreatePost.execute","title":"<code>execute(command: CreatePostCommand) -&gt; PostDTO</code>","text":"<p>Execute the use case.</p> <p>Parameters:</p> Name Type Description Default <code>command</code> <code>CreatePostCommand</code> <p>The command to execute.</p> required <p>Raises:</p> Type Description <code>ThreadNotFoundError</code> <p>If the thread with the given ID does not exist.</p> Source code in <code>src/chat/use_case/create_post.py</code> <pre><code>def execute(self, command: CreatePostCommand) -&gt; PostDTO:\n    \"\"\"Execute the use case.\n\n    Args:\n        command: The command to execute.\n\n    Raises:\n        ThreadNotFoundError: If the thread with the given ID does not exist.\n    \"\"\"\n    post = PostBuilder(self._thread_repository).build(command.thread_id, command.message)\n    self._post_repository.save(post)\n\n    return PostDTO.from_model(post)\n</code></pre>"},{"location":"reference/chat/use_case/#chat.use_case.CreatePostCommand","title":"<code>CreatePostCommand</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Command to create a new post.</p> <p>Attributes:</p> Name Type Description <code>thread_id</code> <code>ULID</code> <p>The ID of the thread that the post belongs to.</p> <code>message</code> <code>str</code> <p>The message of the post.</p>"},{"location":"reference/chat/use_case/#chat.use_case.CreateThread","title":"<code>CreateThread(repository: AbstractThreadRepository)</code>","text":"<p>Use case for creating new threads.</p> <p>Initialize the use case.</p> <p>Parameters:</p> Name Type Description Default <code>repository</code> <code>AbstractThreadRepository</code> <p>The repository to use for thread operations.</p> required Source code in <code>src/chat/use_case/create_thread.py</code> <pre><code>def __init__(self, repository: AbstractThreadRepository) -&gt; None:\n    \"\"\"Initialize the use case.\n\n    Args:\n        repository: The repository to use for thread operations.\n    \"\"\"\n    self._repository = repository\n</code></pre>"},{"location":"reference/chat/use_case/#chat.use_case.CreateThread.execute","title":"<code>execute(command: CreateThreadCommand) -&gt; ThreadDTO</code>","text":"<p>Execute the use case.</p> <p>Parameters:</p> Name Type Description Default <code>command</code> <code>CreateThreadCommand</code> <p>The command to execute.</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If the thread name is empty.</p> <code>ThreadExistsError</code> <p>If a thread with the same name already exists.</p> Source code in <code>src/chat/use_case/create_thread.py</code> <pre><code>def execute(self, command: CreateThreadCommand) -&gt; ThreadDTO:\n    \"\"\"Execute the use case.\n\n    Args:\n        command: The command to execute.\n\n    Raises:\n        ValueError: If the thread name is empty.\n        ThreadExistsError: If a thread with the same name already exists.\n    \"\"\"\n    thread = ThreadBuilder(self._repository).build(command.name)\n    self._repository.save(thread)\n\n    return ThreadDTO.from_model(thread)\n</code></pre>"},{"location":"reference/chat/use_case/#chat.use_case.CreateThreadCommand","title":"<code>CreateThreadCommand</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Command to create a new thread.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The name of the thread.</p>"},{"location":"reference/chat/use_case/#chat.use_case.DeletePost","title":"<code>DeletePost(repository: AbstractPostRepository)</code>","text":"<p>Use case for deleting posts.</p> <p>Initialize the use case.</p> <p>Parameters:</p> Name Type Description Default <code>repository</code> <code>AbstractPostRepository</code> <p>The repository to use for post operations.</p> required Source code in <code>src/chat/use_case/delete_post.py</code> <pre><code>def __init__(self, repository: AbstractPostRepository) -&gt; None:\n    \"\"\"Initialize the use case.\n\n    Args:\n        repository: The repository to use for post operations.\n    \"\"\"\n    self._repository = repository\n</code></pre>"},{"location":"reference/chat/use_case/#chat.use_case.DeletePost.execute","title":"<code>execute(command: DeletePostCommand) -&gt; None</code>","text":"<p>Execute the use case.</p> <p>Parameters:</p> Name Type Description Default <code>command</code> <code>DeletePostCommand</code> <p>The command to execute.</p> required <p>Raises:</p> Type Description <code>PostNotFoundError</code> <p>If the post with the given ID does not exist.</p> Source code in <code>src/chat/use_case/delete_post.py</code> <pre><code>def execute(self, command: DeletePostCommand) -&gt; None:\n    \"\"\"Execute the use case.\n\n    Args:\n        command: The command to execute.\n\n    Raises:\n        PostNotFoundError: If the post with the given ID does not exist.\n    \"\"\"\n    self._repository.delete(command.thread_id, command.post_id)\n</code></pre>"},{"location":"reference/chat/use_case/#chat.use_case.DeletePostCommand","title":"<code>DeletePostCommand</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Command to delete a post.</p> <p>Attributes:</p> Name Type Description <code>thread_id</code> <code>ULID</code> <p>The ID of the thread that the post belongs to.</p> <code>post_id</code> <code>ULID</code> <p>The ID of the post to delete.</p>"},{"location":"reference/chat/use_case/#chat.use_case.DeleteThread","title":"<code>DeleteThread(repository: AbstractThreadRepository)</code>","text":"<p>Use case for deleting threads.</p> <p>Initialize the use case.</p> <p>Parameters:</p> Name Type Description Default <code>repository</code> <code>AbstractThreadRepository</code> <p>The repository to use for thread operations.</p> required Source code in <code>src/chat/use_case/delete_thread.py</code> <pre><code>def __init__(self, repository: AbstractThreadRepository) -&gt; None:\n    \"\"\"Initialize the use case.\n\n    Args:\n        repository: The repository to use for thread operations.\n    \"\"\"\n    self._repository = repository\n</code></pre>"},{"location":"reference/chat/use_case/#chat.use_case.DeleteThread.execute","title":"<code>execute(command: DeleteThreadCommand) -&gt; None</code>","text":"<p>Execute the use case.</p> <p>Parameters:</p> Name Type Description Default <code>command</code> <code>DeleteThreadCommand</code> <p>The command to execute.</p> required <p>Raises:</p> Type Description <code>ThreadNotFoundError</code> <p>If the thread with the given ID does not exist.</p> Source code in <code>src/chat/use_case/delete_thread.py</code> <pre><code>def execute(self, command: DeleteThreadCommand) -&gt; None:\n    \"\"\"Execute the use case.\n\n    Args:\n        command: The command to execute.\n\n    Raises:\n        ThreadNotFoundError: If the thread with the given ID does not exist.\n    \"\"\"\n    self._repository.delete(command.thread_id)\n</code></pre>"},{"location":"reference/chat/use_case/#chat.use_case.DeleteThreadCommand","title":"<code>DeleteThreadCommand</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Command to delete a thread.</p> <p>Attributes:</p> Name Type Description <code>thread_id</code> <code>ULID</code> <p>The ID of the thread to delete.</p>"},{"location":"reference/chat/use_case/#chat.use_case.GetThread","title":"<code>GetThread(repository: AbstractThreadRepository)</code>","text":"<p>Use case for getting thread.</p> <p>Initialize the use case.</p> <p>Parameters:</p> Name Type Description Default <code>repository</code> <code>AbstractThreadRepository</code> <p>The repository to use for thread operations.</p> required Source code in <code>src/chat/use_case/get_thread.py</code> <pre><code>def __init__(self, repository: AbstractThreadRepository) -&gt; None:\n    \"\"\"Initialize the use case.\n\n    Args:\n        repository: The repository to use for thread operations.\n    \"\"\"\n    self._repository = repository\n</code></pre>"},{"location":"reference/chat/use_case/#chat.use_case.GetThread.execute","title":"<code>execute(command: GetThreadCommand) -&gt; ThreadDTO | None</code>","text":"<p>Execute the use case.</p> <p>Returns:</p> Type Description <code>ThreadDTO | None</code> <p>The thread if found, otherwise None.</p> Source code in <code>src/chat/use_case/get_thread.py</code> <pre><code>def execute(self, command: GetThreadCommand) -&gt; ThreadDTO | None:\n    \"\"\"Execute the use case.\n\n    Returns:\n        The thread if found, otherwise None.\n    \"\"\"\n    thread = self._repository.find_by_id(command.thread_id)\n    return ThreadDTO.from_model(thread) if thread else None\n</code></pre>"},{"location":"reference/chat/use_case/#chat.use_case.GetThreadCommand","title":"<code>GetThreadCommand</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Command to get a thread.</p> <p>Attributes:</p> Name Type Description <code>thread_id</code> <code>ULID</code> <p>The ID of the thread to get.</p>"},{"location":"reference/chat/use_case/#chat.use_case.ListPosts","title":"<code>ListPosts(repository: AbstractPostRepository)</code>","text":"<p>Use case for getting posts.</p> <p>This use case retrieves posts from a specific thread identified by the thread_id. The posts are sorted by their creation time.</p> <p>Initialize the use case.</p> <p>Parameters:</p> Name Type Description Default <code>repository</code> <code>AbstractPostRepository</code> <p>The repository to use for post operations.</p> required Source code in <code>src/chat/use_case/list_posts.py</code> <pre><code>def __init__(self, repository: AbstractPostRepository) -&gt; None:\n    \"\"\"Initialize the use case.\n\n    Args:\n        repository: The repository to use for post operations.\n    \"\"\"\n    self._repository = repository\n</code></pre>"},{"location":"reference/chat/use_case/#chat.use_case.ListPosts.execute","title":"<code>execute(command: ListPostsCommand) -&gt; list[PostDTO]</code>","text":"<p>Execute the use case.</p> <p>Parameters:</p> Name Type Description Default <code>command</code> <code>ListPostsCommand</code> <p>The command to execute.</p> required <p>Returns:</p> Type Description <code>list[PostDTO]</code> <p>The list of posts.</p> Source code in <code>src/chat/use_case/list_posts.py</code> <pre><code>def execute(self, command: ListPostsCommand) -&gt; list[PostDTO]:\n    \"\"\"Execute the use case.\n\n    Args:\n        command: The command to execute.\n\n    Returns:\n        The list of posts.\n    \"\"\"\n    posts = self._repository.list_by_thread_id(command.thread_id, start=command.start_time)\n    posts.sort(key=lambda x: x.created_at)\n\n    return [PostDTO.from_model(post) for post in posts]\n</code></pre>"},{"location":"reference/chat/use_case/#chat.use_case.ListPostsCommand","title":"<code>ListPostsCommand</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Command to list posts.</p> <p>Attributes:</p> Name Type Description <code>thread_id</code> <code>ULID</code> <p>The ID of the thread to list posts from.</p> <code>start_time</code> <code>datetime | None</code> <p>The start time to list posts from.</p>"},{"location":"reference/chat/use_case/#chat.use_case.ListThreads","title":"<code>ListThreads(repository: AbstractThreadRepository)</code>","text":"<p>Use case for getting threads.</p> <p>Initialize the use case.</p> <p>Parameters:</p> Name Type Description Default <code>repository</code> <code>AbstractThreadRepository</code> <p>The repository to use for thread operations.</p> required Source code in <code>src/chat/use_case/list_threads.py</code> <pre><code>def __init__(self, repository: AbstractThreadRepository) -&gt; None:\n    \"\"\"Initialize the use case.\n\n    Args:\n        repository: The repository to use for thread operations.\n    \"\"\"\n    self._repository = repository\n</code></pre>"},{"location":"reference/chat/use_case/#chat.use_case.ListThreads.execute","title":"<code>execute() -&gt; list[ThreadDTO]</code>","text":"<p>Execute the use case.</p> <p>Returns:</p> Type Description <code>list[ThreadDTO]</code> <p>The list of threads.</p> Source code in <code>src/chat/use_case/list_threads.py</code> <pre><code>def execute(self) -&gt; list[ThreadDTO]:\n    \"\"\"Execute the use case.\n\n    Returns:\n        The list of threads.\n    \"\"\"\n    threads = self._repository.list_all()\n    threads.sort(key=lambda x: x.id_)\n    return [ThreadDTO.from_model(thread) for thread in threads]\n</code></pre>"},{"location":"reference/chat/use_case/#chat.use_case.PostDTO","title":"<code>PostDTO</code>","text":"<p>               Bases: <code>DTOBase</code></p> <p>DTO for post.</p> <p>Attributes:</p> Name Type Description <code>id_</code> <code>ULID</code> <p>The ID of the post.</p> <code>thread_id</code> <code>ULID</code> <p>The ID of the thread to which the post belongs.</p> <code>message</code> <code>str</code> <p>The message of the post.</p> <code>created_at</code> <code>datetime</code> <p>The timestamp when the post was created.</p>"},{"location":"reference/chat/use_case/#chat.use_case.PostDTO.from_model","title":"<code>from_model(model: Post) -&gt; Self</code>  <code>classmethod</code>","text":"<p>Convert a Post model to a PostDTO instance.</p> <p>Parameters:</p> Name Type Description Default <code>model</code> <code>Post</code> <p>The Post model to convert.</p> required <p>Returns:</p> Type Description <code>Self</code> <p>The converted PostDTO instance.</p> Source code in <code>src/chat/use_case/dto.py</code> <pre><code>@classmethod\ndef from_model(cls, model: Post) -&gt; Self:\n    \"\"\"Convert a Post model to a PostDTO instance.\n\n    Args:\n        model: The Post model to convert.\n\n    Returns:\n        The converted PostDTO instance.\n    \"\"\"\n    return cls(id_=model.id_, thread_id=model.thread_id, message=model.message, created_at=model.created_at)\n</code></pre>"},{"location":"reference/chat/use_case/#chat.use_case.ThreadDTO","title":"<code>ThreadDTO</code>","text":"<p>               Bases: <code>DTOBase</code></p> <p>DTO for thread.</p> <p>Attributes:</p> Name Type Description <code>id_</code> <code>ULID</code> <p>The ID of the thread.</p> <code>name</code> <code>str</code> <p>The name of the thread.</p> <code>created_at</code> <code>datetime</code> <p>The timestamp when the thread was created.</p>"},{"location":"reference/chat/use_case/#chat.use_case.ThreadDTO.from_model","title":"<code>from_model(model: Thread) -&gt; Self</code>  <code>classmethod</code>","text":"<p>Convert a Thread model to a ThreadDTO instance.</p> <p>Parameters:</p> Name Type Description Default <code>model</code> <code>Thread</code> <p>The Thread model to convert.</p> required <p>Returns:</p> Type Description <code>Self</code> <p>The converted ThreadDTO instance.</p> Source code in <code>src/chat/use_case/dto.py</code> <pre><code>@classmethod\ndef from_model(cls, model: Thread) -&gt; Self:\n    \"\"\"Convert a Thread model to a ThreadDTO instance.\n\n    Args:\n        model: The Thread model to convert.\n\n    Returns:\n        The converted ThreadDTO instance.\n    \"\"\"\n    return cls(id_=model.id_, name=model.name, created_at=model.created_at)\n</code></pre>"},{"location":"reference/chat/use_case/create_post/","title":"create_post","text":"<p>Use case for creating new posts.</p>"},{"location":"reference/chat/use_case/create_post/#chat.use_case.create_post.CreatePost","title":"<code>CreatePost(thread_repository: AbstractThreadRepository, post_repository: AbstractPostRepository)</code>","text":"<p>Use case for creating new posts.</p> <p>Initialize the use case.</p> <p>Parameters:</p> Name Type Description Default <code>thread_repository</code> <code>AbstractThreadRepository</code> <p>The repository to use for thread operations.</p> required <code>post_repository</code> <code>AbstractPostRepository</code> <p>The repository to use for post operations.</p> required Source code in <code>src/chat/use_case/create_post.py</code> <pre><code>def __init__(self, thread_repository: AbstractThreadRepository, post_repository: AbstractPostRepository) -&gt; None:\n    \"\"\"Initialize the use case.\n\n    Args:\n        thread_repository: The repository to use for thread operations.\n        post_repository: The repository to use for post operations.\n    \"\"\"\n    self._thread_repository = thread_repository\n    self._post_repository = post_repository\n</code></pre>"},{"location":"reference/chat/use_case/create_post/#chat.use_case.create_post.CreatePost.execute","title":"<code>execute(command: CreatePostCommand) -&gt; PostDTO</code>","text":"<p>Execute the use case.</p> <p>Parameters:</p> Name Type Description Default <code>command</code> <code>CreatePostCommand</code> <p>The command to execute.</p> required <p>Raises:</p> Type Description <code>ThreadNotFoundError</code> <p>If the thread with the given ID does not exist.</p> Source code in <code>src/chat/use_case/create_post.py</code> <pre><code>def execute(self, command: CreatePostCommand) -&gt; PostDTO:\n    \"\"\"Execute the use case.\n\n    Args:\n        command: The command to execute.\n\n    Raises:\n        ThreadNotFoundError: If the thread with the given ID does not exist.\n    \"\"\"\n    post = PostBuilder(self._thread_repository).build(command.thread_id, command.message)\n    self._post_repository.save(post)\n\n    return PostDTO.from_model(post)\n</code></pre>"},{"location":"reference/chat/use_case/create_post/#chat.use_case.create_post.CreatePostCommand","title":"<code>CreatePostCommand</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Command to create a new post.</p> <p>Attributes:</p> Name Type Description <code>thread_id</code> <code>ULID</code> <p>The ID of the thread that the post belongs to.</p> <code>message</code> <code>str</code> <p>The message of the post.</p>"},{"location":"reference/chat/use_case/create_thread/","title":"create_thread","text":"<p>Use case for creating new threads.</p>"},{"location":"reference/chat/use_case/create_thread/#chat.use_case.create_thread.CreateThread","title":"<code>CreateThread(repository: AbstractThreadRepository)</code>","text":"<p>Use case for creating new threads.</p> <p>Initialize the use case.</p> <p>Parameters:</p> Name Type Description Default <code>repository</code> <code>AbstractThreadRepository</code> <p>The repository to use for thread operations.</p> required Source code in <code>src/chat/use_case/create_thread.py</code> <pre><code>def __init__(self, repository: AbstractThreadRepository) -&gt; None:\n    \"\"\"Initialize the use case.\n\n    Args:\n        repository: The repository to use for thread operations.\n    \"\"\"\n    self._repository = repository\n</code></pre>"},{"location":"reference/chat/use_case/create_thread/#chat.use_case.create_thread.CreateThread.execute","title":"<code>execute(command: CreateThreadCommand) -&gt; ThreadDTO</code>","text":"<p>Execute the use case.</p> <p>Parameters:</p> Name Type Description Default <code>command</code> <code>CreateThreadCommand</code> <p>The command to execute.</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If the thread name is empty.</p> <code>ThreadExistsError</code> <p>If a thread with the same name already exists.</p> Source code in <code>src/chat/use_case/create_thread.py</code> <pre><code>def execute(self, command: CreateThreadCommand) -&gt; ThreadDTO:\n    \"\"\"Execute the use case.\n\n    Args:\n        command: The command to execute.\n\n    Raises:\n        ValueError: If the thread name is empty.\n        ThreadExistsError: If a thread with the same name already exists.\n    \"\"\"\n    thread = ThreadBuilder(self._repository).build(command.name)\n    self._repository.save(thread)\n\n    return ThreadDTO.from_model(thread)\n</code></pre>"},{"location":"reference/chat/use_case/create_thread/#chat.use_case.create_thread.CreateThreadCommand","title":"<code>CreateThreadCommand</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Command to create a new thread.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The name of the thread.</p>"},{"location":"reference/chat/use_case/delete_post/","title":"delete_post","text":"<p>Use case for deleting posts.</p>"},{"location":"reference/chat/use_case/delete_post/#chat.use_case.delete_post.DeletePost","title":"<code>DeletePost(repository: AbstractPostRepository)</code>","text":"<p>Use case for deleting posts.</p> <p>Initialize the use case.</p> <p>Parameters:</p> Name Type Description Default <code>repository</code> <code>AbstractPostRepository</code> <p>The repository to use for post operations.</p> required Source code in <code>src/chat/use_case/delete_post.py</code> <pre><code>def __init__(self, repository: AbstractPostRepository) -&gt; None:\n    \"\"\"Initialize the use case.\n\n    Args:\n        repository: The repository to use for post operations.\n    \"\"\"\n    self._repository = repository\n</code></pre>"},{"location":"reference/chat/use_case/delete_post/#chat.use_case.delete_post.DeletePost.execute","title":"<code>execute(command: DeletePostCommand) -&gt; None</code>","text":"<p>Execute the use case.</p> <p>Parameters:</p> Name Type Description Default <code>command</code> <code>DeletePostCommand</code> <p>The command to execute.</p> required <p>Raises:</p> Type Description <code>PostNotFoundError</code> <p>If the post with the given ID does not exist.</p> Source code in <code>src/chat/use_case/delete_post.py</code> <pre><code>def execute(self, command: DeletePostCommand) -&gt; None:\n    \"\"\"Execute the use case.\n\n    Args:\n        command: The command to execute.\n\n    Raises:\n        PostNotFoundError: If the post with the given ID does not exist.\n    \"\"\"\n    self._repository.delete(command.thread_id, command.post_id)\n</code></pre>"},{"location":"reference/chat/use_case/delete_post/#chat.use_case.delete_post.DeletePostCommand","title":"<code>DeletePostCommand</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Command to delete a post.</p> <p>Attributes:</p> Name Type Description <code>thread_id</code> <code>ULID</code> <p>The ID of the thread that the post belongs to.</p> <code>post_id</code> <code>ULID</code> <p>The ID of the post to delete.</p>"},{"location":"reference/chat/use_case/delete_thread/","title":"delete_thread","text":"<p>Use case for deleting threads.</p>"},{"location":"reference/chat/use_case/delete_thread/#chat.use_case.delete_thread.DeleteThread","title":"<code>DeleteThread(repository: AbstractThreadRepository)</code>","text":"<p>Use case for deleting threads.</p> <p>Initialize the use case.</p> <p>Parameters:</p> Name Type Description Default <code>repository</code> <code>AbstractThreadRepository</code> <p>The repository to use for thread operations.</p> required Source code in <code>src/chat/use_case/delete_thread.py</code> <pre><code>def __init__(self, repository: AbstractThreadRepository) -&gt; None:\n    \"\"\"Initialize the use case.\n\n    Args:\n        repository: The repository to use for thread operations.\n    \"\"\"\n    self._repository = repository\n</code></pre>"},{"location":"reference/chat/use_case/delete_thread/#chat.use_case.delete_thread.DeleteThread.execute","title":"<code>execute(command: DeleteThreadCommand) -&gt; None</code>","text":"<p>Execute the use case.</p> <p>Parameters:</p> Name Type Description Default <code>command</code> <code>DeleteThreadCommand</code> <p>The command to execute.</p> required <p>Raises:</p> Type Description <code>ThreadNotFoundError</code> <p>If the thread with the given ID does not exist.</p> Source code in <code>src/chat/use_case/delete_thread.py</code> <pre><code>def execute(self, command: DeleteThreadCommand) -&gt; None:\n    \"\"\"Execute the use case.\n\n    Args:\n        command: The command to execute.\n\n    Raises:\n        ThreadNotFoundError: If the thread with the given ID does not exist.\n    \"\"\"\n    self._repository.delete(command.thread_id)\n</code></pre>"},{"location":"reference/chat/use_case/delete_thread/#chat.use_case.delete_thread.DeleteThreadCommand","title":"<code>DeleteThreadCommand</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Command to delete a thread.</p> <p>Attributes:</p> Name Type Description <code>thread_id</code> <code>ULID</code> <p>The ID of the thread to delete.</p>"},{"location":"reference/chat/use_case/dto/","title":"dto","text":"<p>DTOs for chat use case.</p>"},{"location":"reference/chat/use_case/dto/#chat.use_case.dto.DTOBase","title":"<code>DTOBase</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Base class for DTOs.</p>"},{"location":"reference/chat/use_case/dto/#chat.use_case.dto.PostDTO","title":"<code>PostDTO</code>","text":"<p>               Bases: <code>DTOBase</code></p> <p>DTO for post.</p> <p>Attributes:</p> Name Type Description <code>id_</code> <code>ULID</code> <p>The ID of the post.</p> <code>thread_id</code> <code>ULID</code> <p>The ID of the thread to which the post belongs.</p> <code>message</code> <code>str</code> <p>The message of the post.</p> <code>created_at</code> <code>datetime</code> <p>The timestamp when the post was created.</p>"},{"location":"reference/chat/use_case/dto/#chat.use_case.dto.PostDTO.from_model","title":"<code>from_model(model: Post) -&gt; Self</code>  <code>classmethod</code>","text":"<p>Convert a Post model to a PostDTO instance.</p> <p>Parameters:</p> Name Type Description Default <code>model</code> <code>Post</code> <p>The Post model to convert.</p> required <p>Returns:</p> Type Description <code>Self</code> <p>The converted PostDTO instance.</p> Source code in <code>src/chat/use_case/dto.py</code> <pre><code>@classmethod\ndef from_model(cls, model: Post) -&gt; Self:\n    \"\"\"Convert a Post model to a PostDTO instance.\n\n    Args:\n        model: The Post model to convert.\n\n    Returns:\n        The converted PostDTO instance.\n    \"\"\"\n    return cls(id_=model.id_, thread_id=model.thread_id, message=model.message, created_at=model.created_at)\n</code></pre>"},{"location":"reference/chat/use_case/dto/#chat.use_case.dto.ThreadDTO","title":"<code>ThreadDTO</code>","text":"<p>               Bases: <code>DTOBase</code></p> <p>DTO for thread.</p> <p>Attributes:</p> Name Type Description <code>id_</code> <code>ULID</code> <p>The ID of the thread.</p> <code>name</code> <code>str</code> <p>The name of the thread.</p> <code>created_at</code> <code>datetime</code> <p>The timestamp when the thread was created.</p>"},{"location":"reference/chat/use_case/dto/#chat.use_case.dto.ThreadDTO.from_model","title":"<code>from_model(model: Thread) -&gt; Self</code>  <code>classmethod</code>","text":"<p>Convert a Thread model to a ThreadDTO instance.</p> <p>Parameters:</p> Name Type Description Default <code>model</code> <code>Thread</code> <p>The Thread model to convert.</p> required <p>Returns:</p> Type Description <code>Self</code> <p>The converted ThreadDTO instance.</p> Source code in <code>src/chat/use_case/dto.py</code> <pre><code>@classmethod\ndef from_model(cls, model: Thread) -&gt; Self:\n    \"\"\"Convert a Thread model to a ThreadDTO instance.\n\n    Args:\n        model: The Thread model to convert.\n\n    Returns:\n        The converted ThreadDTO instance.\n    \"\"\"\n    return cls(id_=model.id_, name=model.name, created_at=model.created_at)\n</code></pre>"},{"location":"reference/chat/use_case/get_thread/","title":"get_thread","text":"<p>Use case for getting thread.</p>"},{"location":"reference/chat/use_case/get_thread/#chat.use_case.get_thread.GetThread","title":"<code>GetThread(repository: AbstractThreadRepository)</code>","text":"<p>Use case for getting thread.</p> <p>Initialize the use case.</p> <p>Parameters:</p> Name Type Description Default <code>repository</code> <code>AbstractThreadRepository</code> <p>The repository to use for thread operations.</p> required Source code in <code>src/chat/use_case/get_thread.py</code> <pre><code>def __init__(self, repository: AbstractThreadRepository) -&gt; None:\n    \"\"\"Initialize the use case.\n\n    Args:\n        repository: The repository to use for thread operations.\n    \"\"\"\n    self._repository = repository\n</code></pre>"},{"location":"reference/chat/use_case/get_thread/#chat.use_case.get_thread.GetThread.execute","title":"<code>execute(command: GetThreadCommand) -&gt; ThreadDTO | None</code>","text":"<p>Execute the use case.</p> <p>Returns:</p> Type Description <code>ThreadDTO | None</code> <p>The thread if found, otherwise None.</p> Source code in <code>src/chat/use_case/get_thread.py</code> <pre><code>def execute(self, command: GetThreadCommand) -&gt; ThreadDTO | None:\n    \"\"\"Execute the use case.\n\n    Returns:\n        The thread if found, otherwise None.\n    \"\"\"\n    thread = self._repository.find_by_id(command.thread_id)\n    return ThreadDTO.from_model(thread) if thread else None\n</code></pre>"},{"location":"reference/chat/use_case/get_thread/#chat.use_case.get_thread.GetThreadCommand","title":"<code>GetThreadCommand</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Command to get a thread.</p> <p>Attributes:</p> Name Type Description <code>thread_id</code> <code>ULID</code> <p>The ID of the thread to get.</p>"},{"location":"reference/chat/use_case/list_posts/","title":"list_posts","text":"<p>Use case for getting posts.</p>"},{"location":"reference/chat/use_case/list_posts/#chat.use_case.list_posts.ListPosts","title":"<code>ListPosts(repository: AbstractPostRepository)</code>","text":"<p>Use case for getting posts.</p> <p>This use case retrieves posts from a specific thread identified by the thread_id. The posts are sorted by their creation time.</p> <p>Initialize the use case.</p> <p>Parameters:</p> Name Type Description Default <code>repository</code> <code>AbstractPostRepository</code> <p>The repository to use for post operations.</p> required Source code in <code>src/chat/use_case/list_posts.py</code> <pre><code>def __init__(self, repository: AbstractPostRepository) -&gt; None:\n    \"\"\"Initialize the use case.\n\n    Args:\n        repository: The repository to use for post operations.\n    \"\"\"\n    self._repository = repository\n</code></pre>"},{"location":"reference/chat/use_case/list_posts/#chat.use_case.list_posts.ListPosts.execute","title":"<code>execute(command: ListPostsCommand) -&gt; list[PostDTO]</code>","text":"<p>Execute the use case.</p> <p>Parameters:</p> Name Type Description Default <code>command</code> <code>ListPostsCommand</code> <p>The command to execute.</p> required <p>Returns:</p> Type Description <code>list[PostDTO]</code> <p>The list of posts.</p> Source code in <code>src/chat/use_case/list_posts.py</code> <pre><code>def execute(self, command: ListPostsCommand) -&gt; list[PostDTO]:\n    \"\"\"Execute the use case.\n\n    Args:\n        command: The command to execute.\n\n    Returns:\n        The list of posts.\n    \"\"\"\n    posts = self._repository.list_by_thread_id(command.thread_id, start=command.start_time)\n    posts.sort(key=lambda x: x.created_at)\n\n    return [PostDTO.from_model(post) for post in posts]\n</code></pre>"},{"location":"reference/chat/use_case/list_posts/#chat.use_case.list_posts.ListPostsCommand","title":"<code>ListPostsCommand</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Command to list posts.</p> <p>Attributes:</p> Name Type Description <code>thread_id</code> <code>ULID</code> <p>The ID of the thread to list posts from.</p> <code>start_time</code> <code>datetime | None</code> <p>The start time to list posts from.</p>"},{"location":"reference/chat/use_case/list_threads/","title":"list_threads","text":"<p>Use case for getting threads.</p>"},{"location":"reference/chat/use_case/list_threads/#chat.use_case.list_threads.ListThreads","title":"<code>ListThreads(repository: AbstractThreadRepository)</code>","text":"<p>Use case for getting threads.</p> <p>Initialize the use case.</p> <p>Parameters:</p> Name Type Description Default <code>repository</code> <code>AbstractThreadRepository</code> <p>The repository to use for thread operations.</p> required Source code in <code>src/chat/use_case/list_threads.py</code> <pre><code>def __init__(self, repository: AbstractThreadRepository) -&gt; None:\n    \"\"\"Initialize the use case.\n\n    Args:\n        repository: The repository to use for thread operations.\n    \"\"\"\n    self._repository = repository\n</code></pre>"},{"location":"reference/chat/use_case/list_threads/#chat.use_case.list_threads.ListThreads.execute","title":"<code>execute() -&gt; list[ThreadDTO]</code>","text":"<p>Execute the use case.</p> <p>Returns:</p> Type Description <code>list[ThreadDTO]</code> <p>The list of threads.</p> Source code in <code>src/chat/use_case/list_threads.py</code> <pre><code>def execute(self) -&gt; list[ThreadDTO]:\n    \"\"\"Execute the use case.\n\n    Returns:\n        The list of threads.\n    \"\"\"\n    threads = self._repository.list_all()\n    threads.sort(key=lambda x: x.id_)\n    return [ThreadDTO.from_model(thread) for thread in threads]\n</code></pre>"},{"location":"reference/models/","title":"models","text":"<p>The Models for API Request and Response.</p>"},{"location":"reference/models/thread/","title":"thread","text":"<p>Models for threads.</p>"},{"location":"reference/models/thread/#models.thread.NewThreadRequest","title":"<code>NewThreadRequest</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Request model for creating a new thread.</p>"},{"location":"reference/models/thread/#models.thread.ThreadResponse","title":"<code>ThreadResponse</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Response model for a thread.</p>"},{"location":"reference/models/thread/#models.thread.ThreadResponse.from_dto","title":"<code>from_dto(dto: ThreadDTO) -&gt; Self</code>  <code>classmethod</code>","text":"<p>Converts a DTO to a response model.</p> Source code in <code>src/models/thread.py</code> <pre><code>@classmethod\ndef from_dto(cls, dto: ThreadDTO) -&gt; Self:\n    \"\"\"Converts a DTO to a response model.\"\"\"\n    return cls(id=str(dto.id_), name=dto.name, created_at=dto.created_at)\n</code></pre>"},{"location":"reference/routers/","title":"routers","text":"<p>Routers.</p>"},{"location":"reference/routers/thread/","title":"thread","text":"<p>Thread router module.</p>"},{"location":"reference/routers/thread/#routers.thread.get_threads","title":"<code>get_threads() -&gt; dict[str, list[ThreadResponse]]</code>","text":"<p>GET /threads handler.</p> Source code in <code>src/routers/thread.py</code> <pre><code>@router.get(\"/\")\ndef get_threads() -&gt; dict[str, list[ThreadResponse]]:\n    \"\"\"GET /threads handler.\"\"\"\n    container: Container = router.context[\"container\"]\n    threads = container.list_threads.execute()\n    return {\"threads\": [ThreadResponse.from_dto(thread) for thread in threads]}\n</code></pre>"},{"location":"reference/routers/thread/#routers.thread.post_threads","title":"<code>post_threads(request: NewThreadRequest) -&gt; Response[ThreadResponse]</code>","text":"<p>POST /threads handler.</p> Source code in <code>src/routers/thread.py</code> <pre><code>@router.post(\"/\")\ndef post_threads(request: NewThreadRequest) -&gt; Response[ThreadResponse]:\n    \"\"\"POST /threads handler.\"\"\"\n    container: Container = router.context[\"container\"]\n    command = CreateThreadCommand(name=request.name)\n    try:\n        thread = container.create_thread.execute(command)\n    except ValidationError as e:\n        raise BadRequestError(str(e)) from e\n    return Response(\n        status_code=HTTPStatus.CREATED.value, body=ThreadResponse.from_dto(thread).model_dump_json(by_alias=True)\n    )\n</code></pre>"},{"location":"coverage/","title":"Coverage","text":""}]}